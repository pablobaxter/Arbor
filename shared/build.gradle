apply from: '../publish.gradle'
apply plugin: 'org.jetbrains.kotlin.multiplatform'

group arbor_group
version arbor_version

kotlin {
    jvm {
        mavenPublication {
            groupId arbor_group
            artifactId project.name + '-jvm' // replace with your library artifact id
            version arbor_version
            pom.withXml(configureMavenCentralMetadata)
        }
    }
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos")   \
                                 ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('Arbor')
            }
        }
    }

    sourceSets {
        commonMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
        }

        commonTest.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
            implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"

            // COROUTINE
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$kotlin_coroutine_version"
        }

        iosTest.dependencies {
            // COROUTINE
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$kotlin_coroutine_version"
        }

        jvmMain.dependencies {
            // COROUTINE
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutine_version"
        }

        jvmTest.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

            // COROUTINE
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlin_coroutine_version"
        }
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn 'linkTestDebugExecutableIos'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs test for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getExecutable('test', 'DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("Arbor", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode

bintray {
    //Gets local.properties info
    Properties properties = new Properties()
    def propertiesFile = project.rootProject.file('local.properties')
    properties.load(propertiesFile.newDataInputStream())
    
    //Assigns credentials
    user = properties.getProperty('bintray.user') ?: System.getenv('BINTRAY_USER')
    key = properties.getProperty('bintray.apiKey') ?: System.getenv('BINTRAY_API_KEY')
    
    //Only interested in the JVM for now
    publications = ['jvm']
    
    // Default: false. Whether to run this as dry-run, without deploying
    dryRun = false
    // Default: false. Whether to override version artifacts already published
    override = false
    // Default: false. Whether version should be auto published after an upload
    publish = true
    
    pkg {
        repo = 'Arbor' // the name of the repository you created on Bintray
        name = 'com.frybits.arbor-jvm' // the name of the package you created inside it
        desc = 'Base JVM library for Arbor Logging Utility'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/pablobaxter/Arbor.git'
        githubRepo = 'pablobaxter/Arbor' //Optional Github repository
        version {
            name = this.version
            released = new Date()
            vcsTag = this.version
        }
    }
}